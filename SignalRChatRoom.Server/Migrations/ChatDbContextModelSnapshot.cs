// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRChatRoom.Server.DbContexts;

#nullable disable

namespace SignalRChatRoom.Server.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SignalRChatRoom.Server.Models.ChatRoom", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ForwardId")
                        .HasColumnType("bigint");

                    b.Property<long>("FromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReplyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SeenDateTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ToId");

                    b.ToTable("ChatRooms", "Chats");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients", "Chats");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EntityType")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Groups", "Chats");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.GroupClient", b =>
                {
                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("ClientId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupClients", "Chats");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.SeenMessageLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatRoomId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.ToTable("SeenMessageLog", "Chats");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.ChatRoom", b =>
                {
                    b.HasOne("SignalRChatRoom.Server.Models.Client", "FromClient")
                        .WithMany("SentMessages")
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignalRChatRoom.Server.Models.Group", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SignalRChatRoom.Server.Models.Client", "ToClient")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromClient");

                    b.Navigation("Group");

                    b.Navigation("ToClient");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.GroupClient", b =>
                {
                    b.HasOne("SignalRChatRoom.Server.Models.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRChatRoom.Server.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.SeenMessageLog", b =>
                {
                    b.HasOne("SignalRChatRoom.Server.Models.ChatRoom", "ChatRoom")
                        .WithMany("SeenMessageLogs")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.ChatRoom", b =>
                {
                    b.Navigation("SeenMessageLogs");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.Client", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });

            modelBuilder.Entity("SignalRChatRoom.Server.Models.Group", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
